import json
import os

class ReadJason(object):

    def __init__(self, rootdir,jason_config_name):
        self.rootdir = rootdir
        self.jason_name = jason_config_name
        self.read()
        self.convert_patient_cases_dict_2_lst()
        self.parse_dir_configuration()
        
    # read json file   
    def read(self):
        file_path = os.path.join(self.rootdir,self.jason_name)
        with open(file_path) as f:
            self.data = json.load(f,encoding="UTF-8")
            self.dirs = self.data["dir_configuration"] 
            self.patient_cases_dict =  self.data["patient_cases"]
             
    def parse_dir_configuration(self): 
        confg_dir = self.dirs
        if (len(confg_dir.keys()) > 0):         
            self._patient_path_CS = confg_dir["patient_temp_dir"]
            self._exe_path_CS = confg_dir["CS_exe_dir"]
            self._exe_path_Upsala = confg_dir["Upsala_exe_dir"]
            self._machine_path_CS = confg_dir["Machine_temp_dir"]
            self._ED_path_CS = confg_dir["ED_temp_dir"]
            self._output_path = confg_dir["out_put_dir"]   
 
    #convert dict to list         
    def convert_patient_cases_dict_2_lst(self):
        self._total_patientCase_counts = len(self.patient_cases_dict.keys())
        patients_config_lst = []
        for key, value in self.patient_cases_dict.iteritems():
            temp = [key, value]           
            patients_config_lst.append(temp)
        self._patients_config_lst = patients_config_lst
        return  patients_config_lst
            
## parse single patient initi config parameters from the item of patients_config_lst
class ParseSinglePatientConfig():
    def __init__(self, patients_config_lst_item):  
        self.patient_confi = patients_config_lst_item 
        self.parse_patients_config()
    
    def parse_patients_config(self):
        patient_cong = self.patient_confi
        key_values = patient_cong[1]                 
        self._patient_name = key_values["patient_name"]
        self._CS_exe_name = key_values["CS_exe_name"]
        self._Upsala_exe_name = key_values["Upsala_exe_name"]
        self._ED_file_name = key_values["ED_file_name"]
        self._Machine_file_name = key_values["Machine_file_name"]
        self._BeamDirectons = key_values["Beam Directons"]
        self._patient_change_condition = key_values["patient_change_condition"]      
          
        Gammer_initi_config = key_values["Gammer_initi_configuration"]
        if (len(Gammer_initi_config.keys()) > 0):
            self._Gammer_delta_distance_in_mm = Gammer_initi_config["delta_distance_in_mm"]
            self._Gammer_delta_dose_percentage = Gammer_initi_config["delta_dose_percentage"]
            self._Gammer_ratio_voxels_within_tolerance = Gammer_initi_config["ratio_voxels_within_tolerance"]
            self._Gammer_search_radius = Gammer_initi_config["search_radius"]
                        
        dose_diff_config = key_values["dose_diff_configuration"]   
        if (len(Gammer_initi_config.keys()) > 0):
            self._dose_diff_config_maxdose_lower = dose_diff_config["maxdose_lower"]
            self._dose_diff_config_maxdose_upper = dose_diff_config["maxdose_upper"]
            self._dose_diff_config_normalize_to_sum = dose_diff_config["normalize_to_sum"]   

# folder1_dir = "D:\TestData\practice\EDTemp\ED_case1" (folder ED_case1 contains file: EffectiveDensity,ROIBitmap,ROITableFile)
# folder2_dir = "D:\TestData\practice\patientData\test_98_Proton"
#                (folder test_98_Proton contains file:CalculationStatus, CarbonScanning_log,ProtonRequest)
# output_dir = "D:\TestData\practice\out_put\patientCase1" (folder patientCase1 contains all the files in the folder1_dir/folder2_dir)

class MergeFilesFromTwoFolder():
    def __init__(self,folder1_dir,folder2_dir,output_dir): 
        self.Folder1_dir = folder1_dir
        self.Folder2_dir = folder2_dir
        self.OutPut_dir = output_dir
    
    def merge(self):
        fl1_dir = self.Folder1_dir
        fl2_dir = self.Folder2_dir
        output_dir = self.OutPut_dir 
        if (len(os.listdir(fl1_dir)) > 0 and len(os.listdir(fl2_dir)) > 0):
            shutil.copyfile(fl1_dir, output_dir)
            shutil.copyfile(fl2_dir, output_dir)
        else:
            print ("no files in the folder : %s or %s" % fl1_dir, fl2_dir)
            
                   
        
#===============================================================================
# if __name__ == "__main__" :
#     rootdir = 'D:\\TestData\\practice'     
#     jason_config_name = "init_config.json"
#     data = ReadJason(rootdir,jason_config_name)  
#     parse_patient = ParseSinglePatientConfig(data._patients_config_lst[0])    
#===============================================================================
