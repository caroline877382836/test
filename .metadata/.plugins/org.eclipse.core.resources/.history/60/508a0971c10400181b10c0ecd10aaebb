import struct
import numpy as np
import os
from testSinglePatient import brag_peak_CS

class ReadCSDose():
    FloatSize = 4
    IntSize = 4
    def __init__(self,path,brag_peak_idx,beamDirection):
        self.path = path
        self.Plane = brag_peak_idx
        self.BeamDirection = beamDirection
        self.read_binaryFile()
    
    def Get_Dose3D(self):
        path = self.path        
        if not os.path.isfile(path):  
            print 'Dose file: ' + path + 'not exits'
        f = open(path, 'rb')        
        shape = struct.unpack('3L',file.read(self.IntSize*3))        
        len = shape[0]*shape[1]*shape[2]
        tupleData = struct.unpack(str(len)+'f', file.read(self.FloatSize*len))
        data3D = np.array(tupleData).reshape(shape[2], shape[1],shape[0]) #change to depth,height,width (Tra:width = x, height = z)
        self.Data3D = data3D
        
    def Get_Dose2D_with_LayerIdx(self,layer_idx): 
        data3D = self.Data3D        
        if self.BeamDirection.lower() == "width":
            data2D = data3D[0:data3D.shape[0],0:data3D.shape[1],int(self.Plane)]# width direction
            self._layer_cnt = shape[0]
        if self.BeamDirection.lower() == "height":
            data2D = data3D[0:data3D.shape[0],int(self.Plane),0:data3D.shape[2]]#height direction
            self._layer_cnt = shape[1]
        if self.direction.lower() != "width" and self.direction.lower() != "height":
            print "like this Gaussian(directory,grid,direction,plane), direction only support 'width' and height'"            
        np.squeeze(data2D)
        return data2D
    
    def Get_layCnt(self):
        if self.BeamDirection.lower() == "width":            
            self._layer_cnt = self.Data3D.shape[0]
        if self.BeamDirection.lower() == "height":
            self._layer_cnt = self.Data3D.shape[1]           
           
    def read_binaryFile(self):
        path = self.path
        
        if not os.path.isfile(path):  
            print 'Dose file: ' + path + 'not exits'
        f = open(path, 'rb')        
        shape = struct.unpack('3L',file.read(IntSize*3))        
        len = shape[0]*shape[1]*shape[2]
        tupleData = struct.unpack(str(len)+'f', file.read(FloatSize*len))
        data3D = np.array(tupleData).reshape(shape[2], shape[1],shape[0]) #change to depth,height,width (Tra:width = x, height = z)
        if self.BeamDirection.lower() == "width":
            data2D = data3D[0:shape[2],0:shape[1],int(self.Plane)]# width direction
            self._layer_cnt = shape[0]
        if self.BeamDirection.lower() == "height":
            data2D = data3D[0:shape[2],int(self.Plane),0:shape[0]]#height direction
            self._layer_cnt = shape[1]
        if self.direction.lower() != "width" and self.direction.lower() != "height":
            print "like this Gaussian(directory,grid,direction,plane), direction only support 'width' and height'"            
        np.squeeze(data2D)
        self.Data2D = data2D
        