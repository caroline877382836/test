
class WriteDada2Excel:  #each patient correspond to one sheet
    def __init__(self,book):   # init create excel file: if exits / not
        self._book = book
        self.raw_idx = 0
    
    def add_sheet(self,testPatientName):
        #Add a sheet with one line of data  
        value = "This sheet with patient named: %s" % testPatientName
        book = self._book
        sheet = book.add_sheet(testPatientName)
        sheet.write(0,0, value)
        sheet.write(0, 1, "total_LayerCnt : %s" %  len(self._benchMarch_sigma))
        self._sheet = sheet
    
    def write_sigmas_2_sheet(self,raw_idx,benchMarch_sigma, protonCS_sigma, del_sigma):  
        self._sheet.write(raw_idx, 0, "benchMarch_sigmaX") 
        self._sheet.write(raw_idx, 1, "benchMarch_sigmaY") 
        self._sheet.write(raw_idx, 2, "protonCS_sigmaX") 
        self._sheet.write(raw_idx, 3, "protonCS_sigmaY")
        self._sheet.write(raw_idx, 4, "delta_sigmaX")  # bench - Proton
        self._sheet.write(raw_idx, 5, "delta_sigmaY") 
        for idx in range(0,len(benchMarch_sigma),1):
            self._sheet.write(raw_idx + idx + 2, 0, benchMarch_sigma[idx][0])
            self._sheet.write(raw_idx + idx + 2, 1, benchMarch_sigma[idx][1])
            self._sheet.write(raw_idx + idx + 2, 2, protonCS_sigma[idx][0])
            self._sheet.write(raw_idx + idx + 2, 3, protonCS_sigma[idx][1])
            self._sheet.write(raw_idx + idx + 2, 4, del_sigma[idx][0])
            self._sheet.write(raw_idx + idx + 2, 5, del_sigma[idx][1])
        raw_idx = raw_idx + len(benchMarch_sigma) + 2
        return raw_idx 
            
    def save_sheet(self,excel_name):
        self._book.save(excel_name + ".xls")   
          
    def insert_image2Excel(self,raw,column,msg,img_path):
        self._sheet.write(raw,column, msg)
        self._sheet.insert_image(raw + 1, column,img_path)
         